const express = require('express');
const Post = require('../models/book');
const jwt = require('jsonwebtoken');
const User = require('../models/user');

const router = express.Router();

// endpoint to search all books
router.post('/search_book', async (req, res) => {
    const { token, search_string, pagec } = req.body;

    if(!token || !search_string || !pagec)
      return res.status(400).send({status: 'error', msg: 'All fields must be filled'});

    try{
        const user = jwt.verify(token, process.env.JWT_SECRET);

        const resultsPerPage = 5;
        let page = pagec >= 1 ? pagec : 1;
        page = page -1;

        const posts = await Post.find(
            {
                "$or": [
                    {title: new RegExp(search_string, 'i')},
                    {body: new RegExp(search_string, 'i')}
                ]
            },
            {title: 1, body: 1, imgs: 1, timestamp: 1, owner_name: 1}
        ).sort({timestamp: 'desc'})
        .limit(resultsPerPage)
        .skip(resultsPerPage * page)
        console.log(posts);

        if(posts.length === 0)
          return res.status(404).send({status: 'ENOENT', msg: 'Book not found'});

        return res.status(200).send({status: 'ok', msg: 'Success', posts});
    }catch(e) {
        console.log(e);
        return res.status(400).send({status: 'error', msg: 'Some error occurred', e});
    }
});
// endpoint to search all authors
router.post('/search_users', async (req, res) => {
    const { token, search_string, pagec} = req.body;

    if(!token || !search_string || !pagec)
      return res.status(400).send({status: 'error', msg: 'All fields must be filled'});

    try{
        const user = jwt.verify(token, process.env.JWT_SECRET);

        const resultsPerPage = 10;
        let page = pagec >=1 ? pagec : 1;
        page = page - 1;

        const users = await User.find(
            {
                '$or': [
                    {author: new RegExp(search_string, 'i')}
                ]
            },
            {summary: 1, author: 1, title: 1}
        ).sort({follwers_count: 'desc'})
        .limit(resultsPerPage)
        .skip(resultsPerPage * page)
        .lean();
        
        if(users.length === 0)
          return res.status(404).send({status: 'ENONENT', msg: 'author not found'});
        console.log(users);
        return res.status(200).send({status: 'ok', msg: 'Author gotten successfully', users});
    }catch(e) {
        console.log(e);
        return res.status(400).send({status: 'error', msg: 'Some error occurred'});
    }
});

module.exports = router;